import { useState, useEffect } from 'react';

interface UseFetchUrlProps {
  [key: string]: any;
}

interface UseFetchUrlReturn {
  webUrl: string | null;
  loading: boolean;
  error: Error | null;
}

const useFetchUrl = (data: UseFetchUrlProps): UseFetchUrlReturn => {
  const [webUrl, setWebUrl] = useState<string | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<Error | null>(null);

  useEffect(() => {
    const headers = {
      client_id: '37ac8651fe1bde14358a789e5c3d4522e9ce63c3',
      client_secret: '69592f759d60ae3fbaf4be7b985ff8af0dd73fb8',
      organisationId: 'kotak',
      appIdentifier: 'com.moneyone.app',
      'Content-Type': 'application/json',
    };

    const fetchUrl = async () => {
      try {
        const response = await fetch(
          'https://app-test.onemoney.in/app/pds/webRedirection/Encrypt',
          {
            method: 'POST',
            headers: {
              ...headers,
            },
            body: JSON.stringify({
              redirect: 'https://webrd.onemoney.in/pds/aa/',
              token: 'dsfgsdlfijwelkj453lk5jwq;iolrhjliesjrlskedjf',
              ...data,
            }),
          }
        );

        if (!response.ok) {
          throw new Error('Network response was not ok');
        }

        const responseData = await response.json();
        console.log(responseData,"=========>resfp")
        setWebUrl(responseData.webRedirectionUrl);
      } catch (err) {
        setError(err as Error);
        console.error('Error fetching URL:', err);
      } finally {
        setLoading(false);
      }
    };

    fetchUrl();
  }, [data]);

  return { webUrl, loading, error };
};

export default useFetchUrl;
